/*
   1. Let's see our volume growth by finding the overall session and order volume, trended by quarter for the life of the business.
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       QUARTER(website_sessions.created_at) AS qtr,
       COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
       COUNT(DISTINCT orders.order_id) AS orders       
FROM website_sessions
     LEFT JOIN orders
        ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 1,2




/*
   2. To confirm our efficiency improvements, let's find the quarterly figures!
      For session-to-order conversion rate, revenue per order, and revenue per session.
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       QUARTER(website_sessions.created_at) AS qtr,
       COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_conversion_rate,
       ROUND(SUM(price_usd)/COUNT(DISTINCT orders.order_id), 2)                            AS revenue_per_order,
       ROUND(SUM(price_usd)/COUNT(DISTINCT website_sessions.website_session_id), 2)        AS revenue_per_session
FROM website_sessions
     LEFT JOIN orders
        ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 1,2




/*
   3. Let's see the growth of specific channels. Please pull a quarterly view of orders from 
      GSearch nonbrand, BSearch nonbrand, brand search overall, organic search, and direct type-in.
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       QUARTER(website_sessions.created_at) AS qtr,
       COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' AND utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS gsearch_nonbrand_orders,
       COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' AND utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS bsearch_nonbrand_orders,
       COUNT(DISTINCT CASE WHEN                            utm_campaign = 'brand'    THEN orders.order_id ELSE NULL END) AS brand_search_orders,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL     AND http_referer IS NOT NULL  THEN orders.order_id ELSE NULL END) AS organic_search_orders,   
       COUNT(DISTINCT CASE WHEN utm_source IS NULL     AND http_referer IS NULL      THEN orders.order_id ELSE NULL END) AS direct_type_in_orders       
FROM website_sessions
     LEFT JOIN orders
        ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 1,2




/*
   4. Show the quarterly session-to-order conversion rate trends for those same channels.
*/


SELECT YEAR(website_sessions.created_at) AS yr,
       QUARTER(website_sessions.created_at) AS qtr,
       COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' AND utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END)
          / COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' AND utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_nonbrand_conversion_rate,
       COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' AND utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) 
          / COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' AND utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_nonbrand_conversion_rate,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN orders.order_id ELSE NULL END) 
          / COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN website_sessions.website_session_id ELSE NULL END) AS brand_search_conversion_rate,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN orders.order_id ELSE NULL END) 
          / COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_orders,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN orders.order_id ELSE NULL END)
          / COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_orders
FROM website_sessions
     LEFT JOIN orders
        ON website_sessions.website_session_id = orders.website_session_id
GROUP BY 1,2
ORDER BY 1,2




/*
   5. Let's pull monthly trends for revenue and margin by product (there are 4 products), along with total sales and revenue.
*/

SELECT YEAR(created_at) AS yr,
       MONTH(created_at) AS mth,
       ROUND(SUM(CASE WHEN product_id = 1 THEN price_usd            ELSE NULL END)) AS mrfuzzy_revenue,
       ROUND(SUM(CASE WHEN product_id = 1 THEN price_usd - cogs_usd ELSE NULL END)) AS mrfuzzy_margin,   
       ROUND(SUM(CASE WHEN product_id = 2 THEN price_usd            ELSE NULL END)) AS lovebear_revenue,
       ROUND(SUM(CASE WHEN product_id = 2 THEN price_usd - cogs_usd ELSE NULL END)) AS lovebear_margin,
       ROUND(SUM(CASE WHEN product_id = 3 THEN price_usd            ELSE NULL END)) AS birthdaybear_revenue,
       ROUND(SUM(CASE WHEN product_id = 3 THEN price_usd - cogs_usd ELSE NULL END)) AS birthdaybear_margin,
       ROUND(SUM(CASE WHEN product_id = 4 THEN price_usd            ELSE NULL END)) AS minibear_revenue,
       ROUND(SUM(CASE WHEN product_id = 4 THEN price_usd - cogs_usd ELSE NULL END)) AS minibear_margin,
       ROUND(SUM(price_usd))            AS total_revenue,
       ROUND(SUM(price_usd - cogs_usd)) AS total_margin
FROM order_items
GROUP BY 1,2
ORDER BY 1,2




/*
   6. To see the impact of newly introduced products, find monthly sessions to the /products page.
      Over time, how the % of those sessions clicking through another page has changed?
      How conversion from /products to placing an order has improved?
*/

CREATE TEMPORARY TABLE products_pageviews
SELECT website_session_id,
	   website_pageview_id,
	   created_at AS saw_product_page_at
FROM website_pageviews
WHERE pageview_url = '/products';



SELECT YEAR(saw_product_page_at) AS yr,
       MONTH(saw_product_page_at) AS mth,
       COUNT(DISTINCT products_pageviews.website_session_id)                                                      AS sessions_to_product_page,
	    COUNT(DISTINCT website_pageviews.website_session_id)                                                       AS clicked_to_next_page,
       COUNT(DISTINCT website_pageviews.website_session_id)/COUNT(DISTINCT products_pageviews.website_session_id) AS clickthrough_rate,
       COUNT(DISTINCT orders.order_id)                                                                            AS orders,
       COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT products_pageviews.website_session_id)                      AS products_to_order_rate
FROM products_pageviews
    LEFT JOIN website_pageviews
       ON website_pageviews.website_session_id = products_pageviews.website_session_id -- same session
       AND website_pageviews.website_pageview_id > products_pageviews.website_pageview_id -- they had another page AFTER
	LEFT JOIN orders
       ON orders.website_session_id = products_pageviews.website_session_id
GROUP BY 1,2;





/*
   7. The fourth product was made the primary product on Dec 05, 2014 (previously a cross-sell item).
      Find sales data since then, and how well each product cross-sells from one another?
*/

CREATE TEMPORARY TABLE primary_products
SELECT order_id,
       primary_product_id,
       created_at AS ordered_at
FROM orders
WHERE created_at > '2014-12-05' ;



SELECT primary_product_id,
       COUNT(DISTINCT order_id) AS orders,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END)                          AS xsold_p1,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END)                          AS xsold_p2,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END)                          AS xsold_p3,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END)                          AS xsold_p4,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS p1_xsell_rate,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS p2_xsell_rate,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS p3_xsell_rate,
       COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END)/COUNT(DISTINCT order_id) AS p4_xsell_rate
FROM(
  SELECT primary_products.*,
         order_items.product_id AS cross_sell_product_id
  FROM primary_products
      LEFT JOIN order_items
         ON order_items.order_id = order_items.order_id
         AND order_items.is_primary_item = 0 -- only bringing in cross-sells
) AS primary_w_cross_sell
GROUP BY 1;
