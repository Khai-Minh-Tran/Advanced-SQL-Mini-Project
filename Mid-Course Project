/*
   1. 
     
*/

SELECT utm_source,
       utm_campaign,
       http_referer,
       COUNT(DISTINCT website_session_id) as num_sessions
FROM website_sessions
WHERE created_at < '2013-01-01'
GROUP BY utm_source, utm_campaign, http_referer
ORDER BY num_sessions DESC;




/*
   2. GSearch seems to be the biggest UTM source of our business.
      To showcase the growth, let's pull monthly trends in 2012 for GSearch, both sessions and orders!
*/

SELECT YEAR(website_sessions.created_at)                   AS yr,
       MONTH(website_sessions.created_at)                  AS mth,
       COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
       COUNT(DISTINCT orders.order_id)                     AS orders
FROM website_sessions
     LEFT JOIN orders
       ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
     AND website_sessions.utm_source = 'gsearch'
GROUP BY yr, mth;
         



/*
   3. Let's stick with monthly trends for GSearch! However, this time, why not splitting up brand and nonbrand campaigns separately?
      Was brand picking up with nonbrand?
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN orders.order_id                     ELSE NULL END) AS nonbrand_orders,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'brand'    THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'brand'    THEN orders.order_id                     ELSE NULL END) AS brand_orders
FROM website_sessions
     LEFT JOIN orders
       ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
     AND website_sessions.utm_source = 'gsearch'
GROUP BY yr, mth;




/*
   4. The nonbrand compaign for GSearch performed amazingly. Let's again pull its monthly trends, for both sessions and orders.
      However, this time, it will be splitted by the two available device types, desktop and mobile.
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) AS desktop_sessions,
       COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN orders.order_id.                    ELSE NULL END) AS desktop_orders,
       COUNT(DISTINCT CASE WHEN device_type = 'mobile'  THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
       COUNT(DISTINCT CASE WHEN device_type = 'mobile'  THEN orders.order_id                     ELSE NULL END) AS mobile_orders
FROM website_sessions
    LEFT JOIN orders
      ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
    AND website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand'
GROUP by yr, mth;




/*
   5. Some board members might be concerned with the suspiciously large traffic from GSearch.
      Let's pull monthly trends for GSearch alongside each of the other channels!
*/

   --- Don't forget to list all UTM sources, campaigns, and referers first to have an overall look of the traffic we're getting.

SELECT utm_source,
       utm_campaign,
       http_referer
FROM website_sessions
WHERE website_sessions.created_at < '2013-01-01' 

   --- Then, 
   
SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN utm_source = 'gsearch'                          THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_paid_sessions,
       COUNT(DISTINCT CASE WHEN utm_source = 'bsearch'                          THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_paid_sessions,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_sessions,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL     THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_sessions
FROM website_sessions
     LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
GROUP BY 1,2;
   



/*
   6. Let's see the improvement of our website performance in the first 8 months!
      Let's find the session to order conversion rates for each month!
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT website_sessions.website_session_id) AS num_sessions,
       COUNT(DISTINCT orders.order_id) AS num_orders,
       COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS conversion_rate
FROM website_sessions
     LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
GROUP BY 1,2;




/*
   7. Estimate the revenue of the gsearch lander test.
*/

   --- First, we will find the first pageview id. (answer = 23504)
   
SELECT MIN(website_pageview_id) AS first_test_pv
FROM website_pageviews
WHERE pageview_url = '/lander-1';


   --- Then, we will create a temporary table to see the first test pageviews.

CREATE TEMPORARY TABLE first_test_pageviews
SELECT website_pageviews.website_session_id,
       MIN(website_pageviews.website_pageview_id) AS min_pageview_id
FROM website_pageviews
   INNER JOIN website_sessions
      ON website_sessions.website_session_id = website_pageviews.website_session_id
      AND website_sessions.created_at < '2012-08-01'
      AND website_pageviews.website_pageview_id >= 23504
      AND utm_source = 'gsearch'
      AND utm_campaign = 'nonbrand'
GROUP BY website_pageviews.website_session_id;


   --- Next, we will bring in the landing page of each session (home and lander-1 pages only).
   
CREATE TEMPORARY TABLE nonbrand_sessions_landing_pages
SELECT first_test_pageviews.website_session_id,
       website_pageviews.pageview_url AS landing_page
FROM first_test_pageviews
     LEFT JOIN website_pageviews
        ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
WHERE website_pageviews.pageview_url IN ('/home', '/lander-1');


   --- Next, we will bring in the orders.
   
CREATE TEMPORARY TABLE nonbrand_sessions_orders
SELECT nonbrand_sessions_landing_pages.website_session_id,
       nonbrand_sessions_landing_pages.landing_page,
       orders.order_id AS orders
FROM nonbrand_sessions_landing_pages
    LEFT JOIN orders
       ON nonbrand_sessions_landing_pages.website_session_id = orders.website_session_id;
       
       
   --- Next, let's find the difference between conversion rates.

