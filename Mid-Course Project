/*
   1. Let's look for the total counts of sessions, grouped by UTM source, campaign, and referer!
*/

SELECT utm_source,
       utm_campaign,
       http_referer,
       COUNT(DISTINCT website_session_id) as num_sessions
FROM website_sessions
WHERE created_at < '2013-01-01'
GROUP BY utm_source, utm_campaign, http_referer
ORDER BY num_sessions DESC;

   --- GSearch/Nonbrand: 45,604 
   --- BSearch/Nonbrand: 8,269
   --- GSearch/Brand:    2,284
   --- BSearch/Brand:    560




/*
   2. GSearch seems to be the biggest UTM source of our business.
      To showcase the growth, let's pull monthly trends in 2012 for GSearch, both sessions and orders!
*/

SELECT YEAR(website_sessions.created_at)                   AS yr,
       MONTH(website_sessions.created_at)                  AS mth,
       COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
       COUNT(DISTINCT orders.order_id)                     AS orders
FROM website_sessions
     LEFT JOIN orders
       ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
     AND website_sessions.utm_source = 'gsearch'
GROUP BY yr, mth;
         



/*
   3. Let's stick with monthly trends for GSearch! However, this time, why not splitting up brand and nonbrand campaigns separately?
      Was brand picking up with nonbrand?
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN orders.order_id                     ELSE NULL END) AS nonbrand_orders,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'brand'    THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
       COUNT(DISTINCT CASE WHEN utm_campaign = 'brand'    THEN orders.order_id                     ELSE NULL END) AS brand_orders
FROM website_sessions
     LEFT JOIN orders
       ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
     AND website_sessions.utm_source = 'gsearch'
GROUP BY yr, mth;




/*
   4. The nonbrand compaign for GSearch performed amazingly. Let's again pull its monthly trends, for both sessions and orders.
      However, this time, it will be splitted by the two available device types, desktop and mobile.
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) AS desktop_sessions,
       COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN orders.order_id.                    ELSE NULL END) AS desktop_orders,
       COUNT(DISTINCT CASE WHEN device_type = 'mobile'  THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
       COUNT(DISTINCT CASE WHEN device_type = 'mobile'  THEN orders.order_id                     ELSE NULL END) AS mobile_orders
FROM website_sessions
    LEFT JOIN orders
      ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
    AND website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand'
GROUP by yr, mth;




/*
   5. Some board members might be concerned with the suspiciously large traffic from GSearch.
      Let's pull monthly trends for GSearch alongside each of the other channels!
*/

   --- Don't forget to list all UTM sources, campaigns, and referers first to have an overall look of the traffic we're getting.

SELECT utm_source,
       utm_campaign,
       http_referer
FROM website_sessions
WHERE website_sessions.created_at < '2013-01-01' 

   --- Then, 
   
SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT CASE WHEN utm_source = 'gsearch'                          THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_paid_sessions,
       COUNT(DISTINCT CASE WHEN utm_source = 'bsearch'                          THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_paid_sessions,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_sessions,
       COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL     THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_sessions
FROM website_sessions
     LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
GROUP BY 1,2;
   



/*
   6. Let's see the improvement of our website performance in the first 8 months!
      Let's find the session to order conversion rates for each month!
*/

SELECT YEAR(website_sessions.created_at) AS yr,
       MONTH(website_sessions.created_at) AS mth,
       COUNT(DISTINCT website_sessions.website_session_id) AS num_sessions,
       COUNT(DISTINCT orders.order_id) AS num_orders,
       COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS conversion_rate
FROM website_sessions
     LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2013-01-01'
GROUP BY 1,2;




/*
   7. Let's quantify the impact of the billing tests (/billing, /billing-2).
      First, find the lift generated from the tests (Sep 10-Nov 10), in terms of revenue per billing page session.
      Finally, pull the number of billing page sessions (Oct 27-Nov 27) to understand the monthly impact.
*/

SELECT billing_version_seen,
       COUNT(DISTINCT website_session_id) AS sessions,
       ROUND(SUM(price_usd)/COUNT(DISTINCT website_session_id), 2) AS revenue_per_billing_page_seen
FROM(
  SELECT website_pageviews.website_session_id,
         website_pageviews.pageview_url AS billing_version_seen,
         orders.order_id,
         orders.price_usd
  FROM website_pageviews
      LEFT JOIN orders
         ON orders.website_session_id = website_pageviews.website_session_id
  WHERE website_pageviews.created_at > '2012-09-10'
	AND website_pageviews.created_at < '2012-11-10'
    AND website_pageviews.pageview_url IN ('/billing', '/billing-2')
) AS billing_pageviews_and_order_data
GROUP BY billing_version_seen;

   --- Answer:
   --- For the old version, $22.83 revenue per billing page seen
   --- For the new version, $31.34
   --- Difference: $8.51 per billing page view
   
SELECT COUNT(website_session_id) AS billing_sessions_past_month
FROM website_pageviews
WHERE website_pageviews.pageview_url IN ('/billing', '/billing-2')
  AND created_at BETWEEN '2012-10-27' AND '2012-11-27'

   --- 1,194 billing sessions past month
   --- Difference: $8.51 per billing session
   --- Value of billing test: $10,160 over the past month


